{"version":3,"sources":["api/api.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","submitResults","data","token","console","log","post","headers","Authorization","App","useState","surveyJSON","setsurveyJSON","surveyData","setSurveyData","isLoading","setIsLoading","error","setError","useEffect","setTimeout","window","addEventListener","postedData","JSON","parse","document","className","json","stringify","onStarted","e","onAfterRenderSurvey","ReactNativeWebView","postMessage","PageCount","onAfterRenderPage","onComplete","formId","id","jsonData","style","textDecorationLine","cursor","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kPAIMA,E,OAAWC,EAAMC,OAAO,CAC5BC,QAAQ,GAAD,OAFO,2CAEK,UAGRC,EAAa,iDAAG,WAAOC,EAAMC,GAAK,2EAEzB,OAFyB,SAE3CC,QAAQC,IAAIH,GAAM,SACZL,EAASS,KAAK,UAAWJ,EAAM,CACnCK,QAAS,CAAEC,cAAc,UAAD,OAAYL,MACnC,KAAD,oHAIL,gBATyB,wC,OCsPXM,MArHf,WACE,MAAoCC,mBAAS,MAAK,mBAA3CC,EAAU,KAAEC,EAAa,KAChC,EAAoCF,mBAAS,CAAC,GAAE,mBAAzCG,EAAU,KAAEC,EAAa,KAChC,EAAkCJ,oBAAS,GAAK,mBAAzCK,EAAS,KAAEC,EAAY,KAC9B,EAA0BN,mBAAS,MAAK,mBAAjCO,EAAK,KAAEC,EAAQ,KAkDtB,OAhDAC,qBAAU,WACRC,YAAW,WACTJ,GAAa,EACf,GAAG,KAEHK,OAAOC,iBAAiB,WAAW,SAAUpB,GAC3C,IAEE,IAAMqB,EAAaC,KAAKC,MAAMvB,EAAKA,MACnCE,QAAQC,IAAIkB,GAEF,OAAVA,QAAU,IAAVA,KAAYpB,MACRW,EAAcS,GACdX,EAAcW,GAEbA,GACHP,GAAa,EAOjB,CALE,MAAOC,GACPb,QAAQa,MAAMA,GACdC,EAASD,EACX,CAAC,QACCD,GAAa,EACf,CACF,IAEAU,SAASJ,iBAAiB,WAAW,SAAUpB,GAC7C,IAEE,IAAMqB,EAAaC,KAAKC,MAAMvB,EAAKA,MACnCE,QAAQC,IAAIkB,GAEF,OAAVA,QAAU,IAAVA,KAAYpB,MACRW,EAAcS,GACdX,EAAcW,GAEbA,GACHP,GAAa,EAOjB,CALE,MAAOC,GACPb,QAAQa,MAAMA,GACdC,EAASD,EACX,CAAC,QACCD,GAAa,EACf,CACF,GACF,GAAG,IAGD,mCACGD,EACC,wBAEA,qBAAKY,UAAU,MAAK,SACjBV,EACC,mDACEN,EACF,cAAC,SAAa,CACZiB,KAAMJ,KAAKK,UAAUlB,GACrBmB,UAAW,SAACC,GACV3B,QAAQC,IAAI,iBAAkB0B,EAChC,EACAC,oBAAqB,SAACD,GACpB3B,QAAQC,IAAI,sBAAuB0B,GACnCV,OAAOY,oBACLZ,OAAOY,mBAAmBC,YAAYH,EAAEI,UAC5C,EACAC,kBAAmB,SAACL,GAClB3B,QAAQC,IAAI,oBAAqB0B,GACjCV,OAAOY,oBACLZ,OAAOY,mBAAmBC,YAAYH,EAAEI,UAC5C,EACAE,WAAY,SAACN,GAAC,OACZ9B,EACE,CACEqC,OAAQzB,EAAW0B,GACnBC,SAAUhB,KAAKK,UAAUE,EAAE7B,OAE7BW,EAAWV,MACZ,IAIL,qBAAKwB,UAAU,cAAa,SAC1B,sBAAKA,UAAU,SAAQ,UACrB,uBAAMA,UAAU,OAAM,sFAEP,KACb,uBAAM,sDAGR,wBACEc,MAAO,CAAEC,mBAAoB,YAAaC,OAAQ,WAClDC,QAAS,WACPxC,QAAQC,IAAI,WACZgB,OAAOY,oBACLZ,OAAOY,mBAAmBC,YAAY,EAE1C,EAAE,+BAWpB,EChPeW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJAQ,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAEN9B,SAAS+B,eAAe,SAM1BZ,G","file":"static/js/main.28d68a2f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// https://iqorfuncmobchat001.azurewebsites.net\r\nconst API_URL = \"https://iqorfncmobchat.azurewebsites.net\";\r\nconst instance = axios.create({\r\n  baseURL: `${API_URL}/api`,\r\n});\r\n\r\nexport const submitResults = async (data, token) => {\r\n  try {\r\n    console.log(data);\r\n    await instance.post(\"surveys\", data, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n","// import logo from \"./logo.svg\";\r\nimport './App.css'\r\nimport React, { useEffect, useState } from 'react'\r\nimport 'survey-react/survey.css'\r\nimport * as Survey from 'survey-react'\r\nimport { submitResults } from './api/api'\r\n\r\n//sample json\r\n// const jsonSample = {\r\n//   title: 'iQorian Mobile App Survey',\r\n//   description:\r\n//     'This is to get feedback from the Test users of the iQorian mobile application.',\r\n//   completedHtml: '<h3>Thank you for your feedback</h3>',\r\n//   pages: [\r\n//     {\r\n//       name: 'page1',\r\n//       elements: [\r\n//         {\r\n//           type: 'rating',\r\n//           name: 'satisfaction',\r\n//           title:\r\n//             'How satisfied are you with the look and feel of the application?',\r\n//           description: '(1 is the lowest and 5 is the highest)',\r\n//           isRequired: true,\r\n//         },\r\n//         {\r\n//           type: 'rating',\r\n//           name: 'easeofuse',\r\n//           title: 'How satisfied are you with the ease of use of the app?',\r\n//           description: '(1 is the lowest and 5 is the highest)',\r\n//           isRequired: true,\r\n//         },\r\n//         {\r\n//           type: 'rating',\r\n//           name: 'installonboarding',\r\n//           title:\r\n//             'How satisfied are you with the installation and onboarding experience of the app?',\r\n//           description: '(1 is the lowest and 5 is the highest)',\r\n//           isRequired: true,\r\n//         },\r\n//         {\r\n//           type: 'checkbox',\r\n//           name: 'mostimportant',\r\n//           title: 'Which features of the app are MOST important to you?',\r\n//           isRequired: true,\r\n//           choices: [\r\n//             { value: 'News', text: 'News & Updates' },\r\n//             { value: 'Dashboard', text: 'Dashboard' },\r\n//             { value: 'MyTaks', text: 'My Tasks' },\r\n//             'Notifications',\r\n//             { value: 'MyProfile', text: 'My Profile' },\r\n//             { value: 'QuickLinks', text: 'Quick Links' },\r\n//             { value: 'Surveys', text: 'Surveys' },\r\n//           ],\r\n//           choicesOrder: 'asc',\r\n//         },\r\n//         {\r\n//           type: 'checkbox',\r\n//           name: 'leastimportant',\r\n//           title: 'Which features of the app are LEAST important to you?',\r\n//           choices: [\r\n//             {\r\n//               value: 'News',\r\n//               text: 'News & Updates',\r\n//               visibleIf: \"{mostimportant} notcontains 'News'\",\r\n//             },\r\n//             {\r\n//               value: 'Dashboard',\r\n//               text: 'Dashboard',\r\n//               visibleIf: \"{mostimportant} notcontains 'Dashboard'\",\r\n//             },\r\n//             {\r\n//               value: 'MyTaks',\r\n//               text: 'My Tasks',\r\n//               visibleIf: \"{mostimportant} notcontains 'MyTaks'\",\r\n//             },\r\n//             {\r\n//               value: 'Notifications',\r\n//               text: 'Notifications',\r\n//               visibleIf: \"{mostimportant} notcontains 'Notifications'\",\r\n//             },\r\n//             {\r\n//               value: 'MyProfile',\r\n//               text: 'My Profile',\r\n//               visibleIf: \"{mostimportant} notcontains 'MyProfile'\",\r\n//             },\r\n//             {\r\n//               value: 'QuickLinks',\r\n//               text: 'Quick Links',\r\n//               visibleIf: \"{mostimportant} notcontains 'QuickLinks'\",\r\n//             },\r\n//             {\r\n//               value: 'Surveys',\r\n//               text: 'Surveys',\r\n//               visibleIf: \"{mostimportant} notcontains 'Surveys'\",\r\n//             },\r\n//           ],\r\n//           choicesOrder: 'asc',\r\n//         },\r\n//         {\r\n//           type: 'checkbox',\r\n//           name: 'newfeatures',\r\n//           title: 'What new features would you like to see in the next update?',\r\n//           isRequired: true,\r\n//           hasOther: true,\r\n//           otherPlaceHolder: 'Please describe...',\r\n//           choices: [\r\n//             { value: 'Chat', text: 'Chat/QonnectPlus' },\r\n//             { value: 'PayStubs', text: 'Pay stub' },\r\n//             { value: 'TQ', text: ' TimeQey adjustments' },\r\n//             { value: 'ProfileUpdate', text: 'Profile updates' },\r\n//           ],\r\n//           choicesOrder: 'asc',\r\n//         },\r\n//         {\r\n//           type: 'comment',\r\n//           name: 'impression',\r\n//           title: 'What was your first impression of the app?',\r\n//         },\r\n//         {\r\n//           type: 'comment',\r\n//           name: 'confused',\r\n//           title: 'What confused/annoyed you about the app?',\r\n//         },\r\n//         {\r\n//           type: 'comment',\r\n//           name: 'expectedfeatures',\r\n//           title: 'What are the features you expected to find but didnâ€™t?',\r\n//         },\r\n//         { type: 'comment', name: 'comments', title: 'Comments' },\r\n//       ],\r\n//     },\r\n//   ],\r\n//   isPublic: true,\r\n//   showInList: false,\r\n// }\r\n\r\nfunction App() {\r\n  const [surveyJSON, setsurveyJSON] = useState(null)\r\n  const [surveyData, setSurveyData] = useState({})\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [error, setError] = useState(null)\r\n\r\n  useEffect(() => {\r\n    setTimeout(function () {\r\n      setIsLoading(false)\r\n    }, 6000)\r\n\r\n    window.addEventListener('message', function (data) {\r\n      try {\r\n        // console.log(data.data);\r\n        const postedData = JSON.parse(data.data)\r\n        console.log(postedData)\r\n\r\n        postedData?.token\r\n          ? setSurveyData(postedData)\r\n          : setsurveyJSON(postedData)\r\n\r\n        if (!postedData) {\r\n          setIsLoading(false)\r\n        }\r\n      } catch (error) {\r\n        console.error(error)\r\n        setError(error)\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    })\r\n\r\n    document.addEventListener('message', function (data) {\r\n      try {\r\n        // console.log(data.data);\r\n        const postedData = JSON.parse(data.data)\r\n        console.log(postedData)\r\n\r\n        postedData?.token\r\n          ? setSurveyData(postedData)\r\n          : setsurveyJSON(postedData)\r\n\r\n        if (!postedData) {\r\n          setIsLoading(false)\r\n        }\r\n      } catch (error) {\r\n        console.error(error)\r\n        setError(error)\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <div></div>\r\n      ) : (\r\n        <div className='box'>\r\n          {error ? (\r\n            <p>Update app version</p>\r\n          ) : surveyJSON ? (\r\n            <Survey.Survey\r\n              json={JSON.stringify(surveyJSON)}\r\n              onStarted={(e) => {\r\n                console.log('survey showing', e)\r\n              }}\r\n              onAfterRenderSurvey={(e) => {\r\n                console.log('onAfterRenderSurvey', e)\r\n                window.ReactNativeWebView &&\r\n                  window.ReactNativeWebView.postMessage(e.PageCount)\r\n              }}\r\n              onAfterRenderPage={(e) => {\r\n                console.log('onAfterRenderPage', e)\r\n                window.ReactNativeWebView &&\r\n                  window.ReactNativeWebView.postMessage(e.PageCount)\r\n              }}\r\n              onComplete={(e) =>\r\n                submitResults(\r\n                  {\r\n                    formId: surveyData.id,\r\n                    jsonData: JSON.stringify(e.data),\r\n                  },\r\n                  surveyData.token\r\n                )\r\n              }\r\n            />\r\n          ) : (\r\n            <div className='row content'>\r\n              <div className='center'>\r\n                <span className='info'>\r\n                  There was a problem loading the form probably due to network\r\n                  connection. {'\\n'}\r\n                  <br />\r\n                  Click the \"try again\" button to reload the form.\r\n                </span>\r\n                <button\r\n                  style={{ textDecorationLine: 'underline', cursor: 'pointer' }}\r\n                  onClick={() => {\r\n                    console.log('clicked')\r\n                    window.ReactNativeWebView &&\r\n                      window.ReactNativeWebView.postMessage(0)\r\n                    // setsurveyJSON(jsonSample)\r\n                  }}\r\n                >\r\n                  try again\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}